//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Code.Code.Libaries.Net;
using Code.Core.Client.UI;

namespace Code.Libaries.Net.Packets.ForServer
{
    

    public class UIInterfaceEvent : BasePacket
    {

        public enum EventType
        {
            //from client
            CLICK,//same as button up
            Button_Down,
            ReleasedItemDrag,
            //from server
            SHOW,
            HIDE,
            HIDE_INTERFACE,
            SHOW_INTERFACE,
            SEND_DATA
        }

        public InterfaceType interfaceId = InterfaceType.ActionBars;
        public EventType _eventType;
        public int controlID;
        public List<float> values;
        public string Action { get; set; }

        #region implemented abstract members of BasePacket

        protected override int GetOpCode()
        {
            return 30;
        }

        protected override void enSerialize(ByteStream bytestream)
        {
            bytestream.AddShort((int)interfaceId);
            bytestream.AddShort(controlID);
            bytestream.AddByte((int)_eventType);

            bytestream.AddByte((values == null) ? 0 : values.Count);

            if (values != null)
            {
                for (int i = 0; i < values.Count; i++)
                {
                    bytestream.AddFloat2B(values[i]);
                }
            }

            bytestream.AddString(Action);
        }

        protected override void deSerialize(ByteStream bytestream)
        {
            interfaceId = (InterfaceType) bytestream.GetUnsignedShort();
            controlID = bytestream.GetUnsignedShort();
            _eventType = (EventType) bytestream.GetUnsignedByte();

            int valuesCount = bytestream.GetUnsignedByte();
            if (valuesCount > 0)
            {
                values = new List<float>();
                for (int i = 0; i < valuesCount; i++)
                {
                    values.Add(bytestream.GetFloat2B());
                }
            }

            Action = bytestream.GetString();
        }

        #endregion
    }
}

